

Basierend auf unserem SampleData Projekt erstellen Sie 
füt die unten folgenden Fragen Ausgaben in XML

Beispiel: Geben Sie dickere Bücher als Buchelemente mit dem Buchtitel als Textinhalt aus
            var xel1 =
            new XElement("Buecher",         // das Wurzelelement
                    from b in SampleData.Books
                    where b.PageCount >100
                    orderby b.Title
                    select new XElement("Buch", b.Title)  // pro Buch ein <Buch> element
                );

            
            Console.WriteLine(xel1);    // ToString() gibt formatierten XML Text aus

Beispielausgabe:
<Buecher>
  <Buch>All your base are belong to us</Buch>
  <Buch>C# on Rails</Buch>
  <Buch>Funny Stories</Buch>
  <Buch>LINQ rules</Buch>
</Buecher>



----1 Liste (aller) Bücher, Buchdaten als Elemente -------------------------------

            var xel1 =
            new XElement("Buecher", 
                    from b in SampleData.Books                    
                    orderby b.Title
                    select new XElement
                            ("Buch",                      
                                    new XElement("Titel",b.Title),
                                    new XElement("Seiten", b.PageCount),
                                    new XElement("Isbn", b.Isbn)
                            )                    
                
                );

<Buecher>
  <Buch>
    <Titel>Bonjour mon Amour</Titel>
    <Seiten>50</Seiten>
    <Isbn>2-444-77777-2</Isbn>
  </Buch>
  <Buch>
    <Titel>Funny Stories</Titel>
    <Seiten>101</Seiten>
    <Isbn>0-000-77777-2</Isbn>
  </Buch>
</Buecher>

----2 Liste (aller) Bücher, Buchdaten als Attribute -------------------------------

            var xel1 =
            new XElement("Buecher",
                    from b in SampleData.Books
                    where b.PageCount < 120
                    orderby b.Title
                    select new XElement
                            ("Buch",
                                    new XAttribute("Titel", b.Title),
                                    new XAttribute("Seiten", b.PageCount),
                                    new XAttribute("Isbn", b.Isbn)
                            )

                );

<Buecher>
  <Buch Titel="Bonjour mon Amour" Seiten="50" Isbn="2-444-77777-2" />
  <Buch Titel="Funny Stories" Seiten="101" Isbn="0-000-77777-2" />
</Buecher>



----3 Liste alle Bücher, Buchdaten als Attribute und Elemente ----------------------------

            var xel1 =
            new XElement("Buecher", 
                    from b in SampleData.Books
                    orderby b.Title
                    select new XElement
                            ("Buch",                      
                                    new XAttribute("Titel",b.Title),
                                    new XAttribute("Seiten", b.PageCount),
                                    new XElement("Isbn", b.Isbn)
                            )
                
                );

<Buecher>
  <Buch Titel="All your base are belong to us" Seiten="1205">
    <Isbn>0-333-77777-2</Isbn>
  </Buch>
  <Buch Titel="Bonjour mon Amour" Seiten="50">
    <Isbn>2-444-77777-2</Isbn>
  </Buch>
  <Buch Titel="C# on Rails" Seiten="256">
    <Isbn>0-222-77777-2</Isbn>
  </Buch>
  <Buch Titel="Funny Stories" Seiten="101">
    <Isbn>0-000-77777-2</Isbn>
  </Buch>
  <Buch Titel="LINQ rules" Seiten="300">
    <Isbn>0-111-77777-2</Isbn>
  </Buch>
</Buecher>




----4 Liste aller Verlage mit den jeweiligen Büchern und auch noch die Buchautoren dazu
----        der XML File sollte hierarchisch verschachtelt sein -----------------------

            var xel1 =
            new XElement("Buecher", 
                from p in SampleData.Publishers
                select new XElement("Verlag", new XAttribute("Name",p.Name),
                    from b in SampleData.Books
                    where p == b.Publisher
                    select new XElement
                            ("Buch",                      
                                    new XAttribute("Titel",b.Title),
                                from a in b.Authors
                                select new XElement("Autor",a.LastName)

                            )
                      )                
                );


<Buecher>
  <Verlag Name="FunBooks">
    <Buch Titel="Funny Stories">
      <Autor>Good</Autor>
      <Autor>Simplegame</Autor>
    </Buch>
    <Buch Titel="Bonjour mon Amour">
      <Autor>Simplegame</Autor>
      <Autor>Prince</Autor>
    </Buch>
  </Verlag>
  <Verlag Name="Joe Publishing">
    <Buch Titel="LINQ rules">
      <Autor>Prince</Autor>
    </Buch>
    <Buch Titel="C# on Rails">
      <Autor>Prince</Autor>
    </Buch>
    <Buch Titel="All your base are belong to us">
      <Autor>Legrand</Autor>
    </Buch>
  </Verlag>
  <Verlag Name="I Publisher" />
</Buecher>


----5  Gebe jene Bücher aus, bei denen Prince ein Author ist

            var xel1 =
            new XElement("Buecher",
                    from b in SampleData.Books
                    from a in b.Authors
                    where a.LastName == "Prince"
                    select new XElement
                            ("Buch",
                                    new XAttribute("Titel", b.Title)
                            )                      
                );

<Buecher>
  <Buch Titel="LINQ rules" />
  <Buch Titel="C# on Rails" />
  <Buch Titel="Bonjour mon Amour" />
</Buecher>



----------------------------------------------------------------------------
Hat man XML, so kann man dieses mit Linq auslesen, bearbeiten

            var xelin =
                XElement.Parse( 
                      @"<?xml version=""1.0""  encoding=""UTF-8"" ?>
                        <HandyKatalog>
                            <!-- NOKIA -->
	                        <Hersteller name=""NOKIA"">
		                        <HerstellerNr nr=""h1234""/>
		                        <Modell name=""7110"">
			                        <Gewicht>141g</Gewicht>
			                        <Preis vertrag=""ja"">999</Preis>
			                        <Preis vertrag=""nein"">4999</Preis>
		                        </Modell>
		                        <Modell name=""8210"">
			                        <Gewicht>105g</Gewicht>
			                        <Preis vertrag=""ja"">888</Preis>
		                        </Modell>
	                        </Hersteller>
                        </HandyKatalog> ");

            Console.WriteLine("NodeType: " + xelin.NodeType);
            Console.WriteLine("Name: " + xelin.Name);

            // ein Xelement (eines ganzen Files) stellt das Wurzelelement dar.
            Console.WriteLine("FirstNode: " + xelin.FirstNode);
            Console.WriteLine("FirstAttribute: " + xelin.FirstAttribute);
            Console.WriteLine("Value: " + xelin.Value);
            Console.WriteLine("Parent: " + xelin.Parent);
            Console.WriteLine("Elements().Count(): " + xelin.Elements().Count());
            Console.WriteLine("Nodes().Count(): " + xelin.Nodes().Count());
            Console.WriteLine("Untergeordnete().Count(): " + xelin.Descendants().Count());
            Console.WriteLine("Xpath_//Preis().Count(): " + xelin.XPathSelectElements("//Preis").Count());
   Console.WriteLine("Xpath_//Preis().Count(): " + xelin.XPathSelectElements("....").Count());

//Preis                     Alle Elemente  "Preis" egal in welcher Tiefe  (ist ident zu .Descendants("Preis")
Hersteller/Modell/Preis     genau das gleiche, aber spezifiziert die Tiefe
//Preis[text() < 1000]      Preiselemente, deren Textinhalt < 1000 ist  (ist numerisch,  < "1000")
//Modell[@name = "8210"]    Modell, wo Attribut name = 8210
//Modell[count(Preis) > 1]  Modelle mit mehr als einem Preis


NodeType: Element
Name: HandyKatalog
FirstNode: <!-- NOKIA -->
FirstAttribute:
Value: 141g9994999105g888
Parent:
Elements().Count(): 1
Nodes().Count(): 2
Untergeordnete().Count(): 9
Xpath_//Preis().Count(): 3

------------------------ hier weiter


            // alle Modelle, wo ein Vetragspreis existiert
            var erg2 =
            from m in xelin.Elements("Hersteller").Elements("Modell")
            where m.Elements("Preis").Any 
                  (p => p.Attribute("vertrag").Value == "ja")
            select new
            {
                Modellname = m.Attribute("name").Value
            };

            ObjectDumper.Write(erg2);
            
            
            // Namen der Modelle
            var erg =
            from m in xelin.Elements("Hersteller").Elements("Modell")
            select new
            {
                Name = m.Attribute("name").Value,
                Gewicht = m.Element("Gewicht").Value,
                Preise = from p in m.Elements("Preis")
                         select p.Value
            };
            foreach (var m in erg)
            {   Console.WriteLine(m.Name + " " + m.Gewicht);
                ObjectDumper.Write(m.Preise);
            }

            // Name des 1. Herstellers
            Console.WriteLine(xelin.Element("Hersteller").FirstAttribute);



            // ???
            XElement hersteller = xelin.Element("Hersteller");

            var erg =
            from e in hersteller.Elements()
            select new { ename = e.Name.ToString(),AnzahlElemente = e.Elements().Count() };

            ObjectDumper.Write(erg);
            
            
            
            
            
            // ???
            var maxgewicht =
                (
                (from p in xelin.XPathSelectElements(
                             "//Modell/Gewicht")
                 select p.Value).Max
                 (x => Convert.ToInt32(x.Substring(0, x.Length - 1)))
                 ).ToString() + "g";

            var erg =
                from p in xelin.XPathSelectElements(
                             "//Modell")
                where p.Element("Gewicht").Value == maxgewicht
                select new
                {
                    Modell = p.FirstAttribute.Value,
                    Gewicht = p.Element("Gewicht").Value
                };


            ObjectDumper.Write(erg);
